#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by LINQ to SQL template for T4 C#
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;

namespace SoccerScore.Compact.Linq
{
	[DatabaseAttribute(Name=@"SyncSoccerScore")]
	public partial class DataClassesMatchDataContext : DataContext
	{
		private static MappingSource mappingSource = new AttributeMappingSource();
		
		#region Extensibility Method Definitions
		partial void OnCreated();
		partial void InsertLive_Aibo(Live_Aibo instance);
		partial void UpdateLive_Aibo(Live_Aibo instance);
		partial void DeleteLive_Aibo(Live_Aibo instance);
		partial void InsertMacauPredication(MacauPredication instance);
		partial void UpdateMacauPredication(MacauPredication instance);
		partial void DeleteMacauPredication(MacauPredication instance);
		partial void InsertLive_okoo(Live_okoo instance);
		partial void UpdateLive_okoo(Live_okoo instance);
		partial void DeleteLive_okoo(Live_okoo instance);
		partial void InsertLive_Table(Live_Table instance);
		partial void UpdateLive_Table(Live_Table instance);
		partial void DeleteLive_Table(Live_Table instance);
		partial void InsertLive_Table_lib(Live_Table_lib instance);
		partial void UpdateLive_Table_lib(Live_Table_lib instance);
		partial void DeleteLive_Table_lib(Live_Table_lib instance);
		partial void InsertMatch_analysis_collection(Match_analysis_collection instance);
		partial void UpdateMatch_analysis_collection(Match_analysis_collection instance);
		partial void DeleteMatch_analysis_collection(Match_analysis_collection instance);
		partial void InsertMatch_analysis_result(Match_analysis_result instance);
		partial void UpdateMatch_analysis_result(Match_analysis_result instance);
		partial void DeleteMatch_analysis_result(Match_analysis_result instance);
		partial void InsertMatch_table_xpath(Match_table_xpath instance);
		partial void UpdateMatch_table_xpath(Match_table_xpath instance);
		partial void DeleteMatch_table_xpath(Match_table_xpath instance);
		partial void InsertResult_tb(Result_tb instance);
		partial void UpdateResult_tb(Result_tb instance);
		partial void DeleteResult_tb(Result_tb instance);
		partial void InsertResult_tb_lib(Result_tb_lib instance);
		partial void UpdateResult_tb_lib(Result_tb_lib instance);
		partial void DeleteResult_tb_lib(Result_tb_lib instance);
		partial void InsertLive_Single(Live_Single instance);
		partial void UpdateLive_Single(Live_Single instance);
		partial void DeleteLive_Single(Live_Single instance);
		#endregion
		
		#region Construction
	
		public DataClassesMatchDataContext(string connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesMatchDataContext(System.Data.IDbConnection connection) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesMatchDataContext(string connection, MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesMatchDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
			base(connection, mappingSource)
		{
			OnCreated();
		}
		#endregion
		
		#region Tables
		public Table<Live_Aibo> Live_Aibo
		{
			get { return GetTable<Live_Aibo>(); }
		}
		
		public Table<MacauPredication> MacauPredication
		{
			get { return GetTable<MacauPredication>(); }
		}
		
		public Table<Live_okoo> Live_okoo
		{
			get { return GetTable<Live_okoo>(); }
		}
		
		public Table<Live_Table> Live_Table
		{
			get { return GetTable<Live_Table>(); }
		}
		
		public Table<Live_Table_lib> Live_Table_lib
		{
			get { return GetTable<Live_Table_lib>(); }
		}
		
		public Table<Match_analysis_collection> Match_analysis_collection
		{
			get { return GetTable<Match_analysis_collection>(); }
		}
		
		public Table<Match_analysis_result> Match_analysis_result
		{
			get { return GetTable<Match_analysis_result>(); }
		}
		
		public Table<Match_table_xpath> Match_table_xpath
		{
			get { return GetTable<Match_table_xpath>(); }
		}
		
		public Table<Result_tb> Result_tb
		{
			get { return GetTable<Result_tb>(); }
		}
		
		public Table<Result_tb_lib> Result_tb_lib
		{
			get { return GetTable<Result_tb_lib>(); }
		}
		
		public Table<Live_Single> Live_Single
		{
			get { return GetTable<Live_Single>(); }
		}
		
		#endregion
	}
}

namespace SoccerScore.Compact.Linq
{	
	[Table(Name=@"live_Aibo")]
	public partial class Live_Aibo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Live_Aibo()
		{
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnLive_Aibo_idChanging(int value);
		partial void OnLive_Aibo_idChanged();
		private int _Live_Aibo_id;
		[Column(Storage=@"_Live_Aibo_id", Name=@"live_Aibo_id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Live_Aibo_id
		{
			get { return _Live_Aibo_id; }
			set {
				if (_Live_Aibo_id != value) {
					OnLive_Aibo_idChanging(value);
					SendPropertyChanging();
					_Live_Aibo_id = value;
					SendPropertyChanged("Live_Aibo_id");
					OnLive_Aibo_idChanged();
				}
			}
		}
		
		partial void OnKeyValueChanging(string value);
		partial void OnKeyValueChanged();
		private string _KeyValue;
		[Column(Storage=@"_KeyValue", DbType=@"NVarChar(50)")]
		public string KeyValue
		{
			get { return _KeyValue; }
			set {
				if (_KeyValue != value) {
					OnKeyValueChanging(value);
					SendPropertyChanging();
					_KeyValue = value;
					SendPropertyChanged("KeyValue");
					OnKeyValueChanged();
				}
			}
		}
		
		partial void OnLeagueNameChanging(string value);
		partial void OnLeagueNameChanged();
		private string _LeagueName;
		[Column(Storage=@"_LeagueName", DbType=@"NVarChar(50)")]
		public string LeagueName
		{
			get { return _LeagueName; }
			set {
				if (_LeagueName != value) {
					OnLeagueNameChanging(value);
					SendPropertyChanging();
					_LeagueName = value;
					SendPropertyChanged("LeagueName");
					OnLeagueNameChanged();
				}
			}
		}
		
		partial void OnMatch_timeChanging(string value);
		partial void OnMatch_timeChanged();
		private string _Match_time;
		[Column(Storage=@"_Match_time", Name=@"match_time", DbType=@"NVarChar(50)")]
		public string Match_time
		{
			get { return _Match_time; }
			set {
				if (_Match_time != value) {
					OnMatch_timeChanging(value);
					SendPropertyChanging();
					_Match_time = value;
					SendPropertyChanged("Match_time");
					OnMatch_timeChanged();
				}
			}
		}
		
		partial void OnMatchOrder1_HomeNameChanging(string value);
		partial void OnMatchOrder1_HomeNameChanged();
		private string _MatchOrder1_HomeName;
		[Column(Storage=@"_MatchOrder1_HomeName", DbType=@"NVarChar(50)")]
		public string MatchOrder1_HomeName
		{
			get { return _MatchOrder1_HomeName; }
			set {
				if (_MatchOrder1_HomeName != value) {
					OnMatchOrder1_HomeNameChanging(value);
					SendPropertyChanging();
					_MatchOrder1_HomeName = value;
					SendPropertyChanged("MatchOrder1_HomeName");
					OnMatchOrder1_HomeNameChanged();
				}
			}
		}
		
		partial void OnMatchOrder1_HandicapNumberChanging(string value);
		partial void OnMatchOrder1_HandicapNumberChanged();
		private string _MatchOrder1_HandicapNumber;
		[Column(Storage=@"_MatchOrder1_HandicapNumber", DbType=@"NVarChar(50)")]
		public string MatchOrder1_HandicapNumber
		{
			get { return _MatchOrder1_HandicapNumber; }
			set {
				if (_MatchOrder1_HandicapNumber != value) {
					OnMatchOrder1_HandicapNumberChanging(value);
					SendPropertyChanging();
					_MatchOrder1_HandicapNumber = value;
					SendPropertyChanged("MatchOrder1_HandicapNumber");
					OnMatchOrder1_HandicapNumberChanged();
				}
			}
		}
		
		partial void OnMatchOrder1_AwayNameChanging(string value);
		partial void OnMatchOrder1_AwayNameChanged();
		private string _MatchOrder1_AwayName;
		[Column(Storage=@"_MatchOrder1_AwayName", DbType=@"NVarChar(50)")]
		public string MatchOrder1_AwayName
		{
			get { return _MatchOrder1_AwayName; }
			set {
				if (_MatchOrder1_AwayName != value) {
					OnMatchOrder1_AwayNameChanging(value);
					SendPropertyChanging();
					_MatchOrder1_AwayName = value;
					SendPropertyChanged("MatchOrder1_AwayName");
					OnMatchOrder1_AwayNameChanged();
				}
			}
		}
		
		#endregion
	}
}

namespace SoccerScore.Compact.Linq
{	
	[Table(Name=@"MacauPredication")]
	public partial class MacauPredication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public MacauPredication()
		{
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnMacauPredication_idChanging(int value);
		partial void OnMacauPredication_idChanged();
		private int _MacauPredication_id;
		[Column(Storage=@"_MacauPredication_id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int MacauPredication_id
		{
			get { return _MacauPredication_id; }
			set {
				if (_MacauPredication_id != value) {
					OnMacauPredication_idChanging(value);
					SendPropertyChanging();
					_MacauPredication_id = value;
					SendPropertyChanged("MacauPredication_id");
					OnMacauPredication_idChanged();
				}
			}
		}
		
		partial void OnRecord_datetimeChanging(DateTime? value);
		partial void OnRecord_datetimeChanged();
		private DateTime? _Record_datetime;
		[Column(Storage=@"_Record_datetime", DbType=@"DateTime")]
		public DateTime? Record_datetime
		{
			get { return _Record_datetime; }
			set {
				if (_Record_datetime != value) {
					OnRecord_datetimeChanging(value);
					SendPropertyChanging();
					_Record_datetime = value;
					SendPropertyChanged("Record_datetime");
					OnRecord_datetimeChanged();
				}
			}
		}
		
		partial void OnHome_teamChanging(string value);
		partial void OnHome_teamChanged();
		private string _Home_team;
		[Column(Storage=@"_Home_team", DbType=@"NVarChar(50)")]
		public string Home_team
		{
			get { return _Home_team; }
			set {
				if (_Home_team != value) {
					OnHome_teamChanging(value);
					SendPropertyChanging();
					_Home_team = value;
					SendPropertyChanged("Home_team");
					OnHome_teamChanged();
				}
			}
		}
		
		partial void OnAway_teamChanging(string value);
		partial void OnAway_teamChanged();
		private string _Away_team;
		[Column(Storage=@"_Away_team", DbType=@"NVarChar(50)")]
		public string Away_team
		{
			get { return _Away_team; }
			set {
				if (_Away_team != value) {
					OnAway_teamChanging(value);
					SendPropertyChanging();
					_Away_team = value;
					SendPropertyChanged("Away_team");
					OnAway_teamChanged();
				}
			}
		}
		
		partial void OnMacauslotChanging(string value);
		partial void OnMacauslotChanged();
		private string _Macauslot;
		[Column(Storage=@"_Macauslot", DbType=@"NVarChar(500)")]
		public string Macauslot
		{
			get { return _Macauslot; }
			set {
				if (_Macauslot != value) {
					OnMacauslotChanging(value);
					SendPropertyChanging();
					_Macauslot = value;
					SendPropertyChanged("Macauslot");
					OnMacauslotChanged();
				}
			}
		}
		
		partial void OnPredicationChanging(string value);
		partial void OnPredicationChanged();
		private string _Predication;
		[Column(Storage=@"_Predication", DbType=@"NVarChar(50)")]
		public string Predication
		{
			get { return _Predication; }
			set {
				if (_Predication != value) {
					OnPredicationChanging(value);
					SendPropertyChanging();
					_Predication = value;
					SendPropertyChanged("Predication");
					OnPredicationChanged();
				}
			}
		}
		
		partial void OnAccuracyChanging(int? value);
		partial void OnAccuracyChanged();
		private int? _Accuracy;
		[Column(Storage=@"_Accuracy", DbType=@"Int")]
		public int? Accuracy
		{
			get { return _Accuracy; }
			set {
				if (_Accuracy != value) {
					OnAccuracyChanging(value);
					SendPropertyChanging();
					_Accuracy = value;
					SendPropertyChanged("Accuracy");
					OnAccuracyChanged();
				}
			}
		}
		
		#endregion
	}
}

namespace SoccerScore.Compact.Linq
{	
	[Table(Name=@"live_okoo")]
	public partial class Live_okoo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Live_okoo()
		{
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnLive_okoo_idChanging(int value);
		partial void OnLive_okoo_idChanged();
		private int _Live_okoo_id;
		[Column(Storage=@"_Live_okoo_id", Name=@"live_okoo_id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Live_okoo_id
		{
			get { return _Live_okoo_id; }
			set {
				if (_Live_okoo_id != value) {
					OnLive_okoo_idChanging(value);
					SendPropertyChanging();
					_Live_okoo_id = value;
					SendPropertyChanged("Live_okoo_id");
					OnLive_okoo_idChanged();
				}
			}
		}
		
		partial void OnKeyValueChanging(int? value);
		partial void OnKeyValueChanged();
		private int? _KeyValue;
		[Column(Storage=@"_KeyValue", DbType=@"Int")]
		public int? KeyValue
		{
			get { return _KeyValue; }
			set {
				if (_KeyValue != value) {
					OnKeyValueChanging(value);
					SendPropertyChanging();
					_KeyValue = value;
					SendPropertyChanged("KeyValue");
					OnKeyValueChanged();
				}
			}
		}
		
		partial void OnLeagueNameChanging(string value);
		partial void OnLeagueNameChanged();
		private string _LeagueName;
		[Column(Storage=@"_LeagueName", DbType=@"NVarChar(50)")]
		public string LeagueName
		{
			get { return _LeagueName; }
			set {
				if (_LeagueName != value) {
					OnLeagueNameChanging(value);
					SendPropertyChanging();
					_LeagueName = value;
					SendPropertyChanged("LeagueName");
					OnLeagueNameChanged();
				}
			}
		}
		
		partial void OnMatch_timeChanging(string value);
		partial void OnMatch_timeChanged();
		private string _Match_time;
		[Column(Storage=@"_Match_time", Name=@"match_time", DbType=@"NVarChar(50)")]
		public string Match_time
		{
			get { return _Match_time; }
			set {
				if (_Match_time != value) {
					OnMatch_timeChanging(value);
					SendPropertyChanging();
					_Match_time = value;
					SendPropertyChanged("Match_time");
					OnMatch_timeChanged();
				}
			}
		}
		
		partial void OnMatchOrder1_HomeNameChanging(string value);
		partial void OnMatchOrder1_HomeNameChanged();
		private string _MatchOrder1_HomeName;
		[Column(Storage=@"_MatchOrder1_HomeName", DbType=@"NVarChar(50)")]
		public string MatchOrder1_HomeName
		{
			get { return _MatchOrder1_HomeName; }
			set {
				if (_MatchOrder1_HomeName != value) {
					OnMatchOrder1_HomeNameChanging(value);
					SendPropertyChanging();
					_MatchOrder1_HomeName = value;
					SendPropertyChanged("MatchOrder1_HomeName");
					OnMatchOrder1_HomeNameChanged();
				}
			}
		}
		
		partial void OnMatchOrder1_HandicapNumberChanging(string value);
		partial void OnMatchOrder1_HandicapNumberChanged();
		private string _MatchOrder1_HandicapNumber;
		[Column(Storage=@"_MatchOrder1_HandicapNumber", DbType=@"NVarChar(50)")]
		public string MatchOrder1_HandicapNumber
		{
			get { return _MatchOrder1_HandicapNumber; }
			set {
				if (_MatchOrder1_HandicapNumber != value) {
					OnMatchOrder1_HandicapNumberChanging(value);
					SendPropertyChanging();
					_MatchOrder1_HandicapNumber = value;
					SendPropertyChanged("MatchOrder1_HandicapNumber");
					OnMatchOrder1_HandicapNumberChanged();
				}
			}
		}
		
		partial void OnMatchOrder1_AwayNameChanging(string value);
		partial void OnMatchOrder1_AwayNameChanged();
		private string _MatchOrder1_AwayName;
		[Column(Storage=@"_MatchOrder1_AwayName", DbType=@"NVarChar(50)")]
		public string MatchOrder1_AwayName
		{
			get { return _MatchOrder1_AwayName; }
			set {
				if (_MatchOrder1_AwayName != value) {
					OnMatchOrder1_AwayNameChanging(value);
					SendPropertyChanging();
					_MatchOrder1_AwayName = value;
					SendPropertyChanged("MatchOrder1_AwayName");
					OnMatchOrder1_AwayNameChanged();
				}
			}
		}
		
		partial void OnOk_1_0Changing(string value);
		partial void OnOk_1_0Changed();
		private string _Ok_1_0;
		[Column(Storage=@"_Ok_1_0", Name=@"ok_1_0", DbType=@"NVarChar(50)")]
		public string Ok_1_0
		{
			get { return _Ok_1_0; }
			set {
				if (_Ok_1_0 != value) {
					OnOk_1_0Changing(value);
					SendPropertyChanging();
					_Ok_1_0 = value;
					SendPropertyChanged("Ok_1_0");
					OnOk_1_0Changed();
				}
			}
		}
		
		partial void OnOk_1_1Changing(string value);
		partial void OnOk_1_1Changed();
		private string _Ok_1_1;
		[Column(Storage=@"_Ok_1_1", Name=@"ok_1_1", DbType=@"NVarChar(50)")]
		public string Ok_1_1
		{
			get { return _Ok_1_1; }
			set {
				if (_Ok_1_1 != value) {
					OnOk_1_1Changing(value);
					SendPropertyChanging();
					_Ok_1_1 = value;
					SendPropertyChanged("Ok_1_1");
					OnOk_1_1Changed();
				}
			}
		}
		
		partial void OnOk_1_2Changing(string value);
		partial void OnOk_1_2Changed();
		private string _Ok_1_2;
		[Column(Storage=@"_Ok_1_2", Name=@"ok_1_2", DbType=@"NVarChar(50)")]
		public string Ok_1_2
		{
			get { return _Ok_1_2; }
			set {
				if (_Ok_1_2 != value) {
					OnOk_1_2Changing(value);
					SendPropertyChanging();
					_Ok_1_2 = value;
					SendPropertyChanged("Ok_1_2");
					OnOk_1_2Changed();
				}
			}
		}
		
		partial void OnMatchInfoChanging(string value);
		partial void OnMatchInfoChanged();
		private string _MatchInfo;
		[Column(Storage=@"_MatchInfo", DbType=@"NVarChar(50)")]
		public string MatchInfo
		{
			get { return _MatchInfo; }
			set {
				if (_MatchInfo != value) {
					OnMatchInfoChanging(value);
					SendPropertyChanging();
					_MatchInfo = value;
					SendPropertyChanged("MatchInfo");
					OnMatchInfoChanged();
				}
			}
		}
		
		partial void OnMatch_1_WinChanging(string value);
		partial void OnMatch_1_WinChanged();
		private string _Match_1_Win;
		[Column(Storage=@"_Match_1_Win", DbType=@"NVarChar(50)")]
		public string Match_1_Win
		{
			get { return _Match_1_Win; }
			set {
				if (_Match_1_Win != value) {
					OnMatch_1_WinChanging(value);
					SendPropertyChanging();
					_Match_1_Win = value;
					SendPropertyChanged("Match_1_Win");
					OnMatch_1_WinChanged();
				}
			}
		}
		
		partial void OnMatch_1_DrawnChanging(string value);
		partial void OnMatch_1_DrawnChanged();
		private string _Match_1_Drawn;
		[Column(Storage=@"_Match_1_Drawn", DbType=@"NVarChar(50)")]
		public string Match_1_Drawn
		{
			get { return _Match_1_Drawn; }
			set {
				if (_Match_1_Drawn != value) {
					OnMatch_1_DrawnChanging(value);
					SendPropertyChanging();
					_Match_1_Drawn = value;
					SendPropertyChanged("Match_1_Drawn");
					OnMatch_1_DrawnChanged();
				}
			}
		}
		
		partial void OnMatch_1_LostChanging(string value);
		partial void OnMatch_1_LostChanged();
		private string _Match_1_Lost;
		[Column(Storage=@"_Match_1_Lost", DbType=@"NVarChar(50)")]
		public string Match_1_Lost
		{
			get { return _Match_1_Lost; }
			set {
				if (_Match_1_Lost != value) {
					OnMatch_1_LostChanging(value);
					SendPropertyChanging();
					_Match_1_Lost = value;
					SendPropertyChanged("Match_1_Lost");
					OnMatch_1_LostChanged();
				}
			}
		}
		
		#endregion
	}
}

namespace SoccerScore.Compact.Linq
{	
	[Table(Name=@"live_Table")]
	public partial class Live_Table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Live_Table()
		{
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnLive_table_idChanging(int value);
		partial void OnLive_table_idChanged();
		private int _Live_table_id;
		[Column(Storage=@"_Live_table_id", Name=@"live_table_id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Live_table_id
		{
			get { return _Live_table_id; }
			set {
				if (_Live_table_id != value) {
					OnLive_table_idChanging(value);
					SendPropertyChanging();
					_Live_table_id = value;
					SendPropertyChanged("Live_table_id");
					OnLive_table_idChanged();
				}
			}
		}
		
		partial void OnHtml_positionChanging(string value);
		partial void OnHtml_positionChanged();
		private string _Html_position;
		[Column(Storage=@"_Html_position", Name=@"html_position", DbType=@"NVarChar(50)")]
		public string Html_position
		{
			get { return _Html_position; }
			set {
				if (_Html_position != value) {
					OnHtml_positionChanging(value);
					SendPropertyChanging();
					_Html_position = value;
					SendPropertyChanged("Html_position");
					OnHtml_positionChanged();
				}
			}
		}
		
		partial void OnHome_team_bigChanging(string value);
		partial void OnHome_team_bigChanged();
		private string _Home_team_big;
		[Column(Storage=@"_Home_team_big", Name=@"home_team_big", DbType=@"NVarChar(50)")]
		public string Home_team_big
		{
			get { return _Home_team_big; }
			set {
				if (_Home_team_big != value) {
					OnHome_team_bigChanging(value);
					SendPropertyChanging();
					_Home_team_big = value;
					SendPropertyChanged("Home_team_big");
					OnHome_team_bigChanged();
				}
			}
		}
		
		partial void OnAway_team_bigChanging(string value);
		partial void OnAway_team_bigChanged();
		private string _Away_team_big;
		[Column(Storage=@"_Away_team_big", Name=@"away_team_big", DbType=@"NVarChar(50)")]
		public string Away_team_big
		{
			get { return _Away_team_big; }
			set {
				if (_Away_team_big != value) {
					OnAway_team_bigChanging(value);
					SendPropertyChanging();
					_Away_team_big = value;
					SendPropertyChanged("Away_team_big");
					OnAway_team_bigChanged();
				}
			}
		}
		
		partial void OnMatch_typeChanging(string value);
		partial void OnMatch_typeChanged();
		private string _Match_type;
		[Column(Storage=@"_Match_type", Name=@"match_type", DbType=@"NVarChar(50)")]
		public string Match_type
		{
			get { return _Match_type; }
			set {
				if (_Match_type != value) {
					OnMatch_typeChanging(value);
					SendPropertyChanging();
					_Match_type = value;
					SendPropertyChanged("Match_type");
					OnMatch_typeChanged();
				}
			}
		}
		
		partial void OnS_dateChanging(string value);
		partial void OnS_dateChanged();
		private string _S_date;
		[Column(Storage=@"_S_date", Name=@"s_date", DbType=@"NVarChar(50)")]
		public string S_date
		{
			get { return _S_date; }
			set {
				if (_S_date != value) {
					OnS_dateChanging(value);
					SendPropertyChanging();
					_S_date = value;
					SendPropertyChanged("S_date");
					OnS_dateChanged();
				}
			}
		}
		
		partial void OnS_timeChanging(string value);
		partial void OnS_timeChanged();
		private string _S_time;
		[Column(Storage=@"_S_time", Name=@"s_time", DbType=@"NVarChar(50)")]
		public string S_time
		{
			get { return _S_time; }
			set {
				if (_S_time != value) {
					OnS_timeChanging(value);
					SendPropertyChanging();
					_S_time = value;
					SendPropertyChanged("S_time");
					OnS_timeChanged();
				}
			}
		}
		
		partial void OnStatusChanging(string value);
		partial void OnStatusChanged();
		private string _Status;
		[Column(Storage=@"_Status", Name=@"status", DbType=@"NVarChar(50)")]
		public string Status
		{
			get { return _Status; }
			set {
				if (_Status != value) {
					OnStatusChanging(value);
					SendPropertyChanging();
					_Status = value;
					SendPropertyChanged("Status");
					OnStatusChanged();
				}
			}
		}
		
		partial void OnHome_teamChanging(string value);
		partial void OnHome_teamChanged();
		private string _Home_team;
		[Column(Storage=@"_Home_team", Name=@"home_team", DbType=@"NVarChar(50)")]
		public string Home_team
		{
			get { return _Home_team; }
			set {
				if (_Home_team != value) {
					OnHome_teamChanging(value);
					SendPropertyChanging();
					_Home_team = value;
					SendPropertyChanged("Home_team");
					OnHome_teamChanged();
				}
			}
		}
		
		partial void OnAway_teamChanging(string value);
		partial void OnAway_teamChanged();
		private string _Away_team;
		[Column(Storage=@"_Away_team", Name=@"away_team", DbType=@"NVarChar(50)")]
		public string Away_team
		{
			get { return _Away_team; }
			set {
				if (_Away_team != value) {
					OnAway_teamChanging(value);
					SendPropertyChanging();
					_Away_team = value;
					SendPropertyChanged("Away_team");
					OnAway_teamChanged();
				}
			}
		}
		
		partial void OnFull_time_scoreChanging(string value);
		partial void OnFull_time_scoreChanged();
		private string _Full_time_score;
		[Column(Storage=@"_Full_time_score", Name=@"full_time_score", DbType=@"NVarChar(50)")]
		public string Full_time_score
		{
			get { return _Full_time_score; }
			set {
				if (_Full_time_score != value) {
					OnFull_time_scoreChanging(value);
					SendPropertyChanging();
					_Full_time_score = value;
					SendPropertyChanged("Full_time_score");
					OnFull_time_scoreChanged();
				}
			}
		}
		
		partial void OnHalf_time_scoreChanging(string value);
		partial void OnHalf_time_scoreChanged();
		private string _Half_time_score;
		[Column(Storage=@"_Half_time_score", Name=@"half_time_score", DbType=@"NVarChar(50)")]
		public string Half_time_score
		{
			get { return _Half_time_score; }
			set {
				if (_Half_time_score != value) {
					OnHalf_time_scoreChanging(value);
					SendPropertyChanging();
					_Half_time_score = value;
					SendPropertyChanged("Half_time_score");
					OnHalf_time_scoreChanged();
				}
			}
		}
		
		#endregion
	}
}

namespace SoccerScore.Compact.Linq
{	
	[Table(Name=@"live_Table_lib")]
	public partial class Live_Table_lib : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Live_Table_lib()
		{
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnLive_table_lib_idChanging(int value);
		partial void OnLive_table_lib_idChanged();
		private int _Live_table_lib_id;
		[Column(Storage=@"_Live_table_lib_id", Name=@"live_table_lib_id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Live_table_lib_id
		{
			get { return _Live_table_lib_id; }
			set {
				if (_Live_table_lib_id != value) {
					OnLive_table_lib_idChanging(value);
					SendPropertyChanging();
					_Live_table_lib_id = value;
					SendPropertyChanged("Live_table_lib_id");
					OnLive_table_lib_idChanged();
				}
			}
		}
		
		partial void OnHtml_positionChanging(int? value);
		partial void OnHtml_positionChanged();
		private int? _Html_position;
		[Column(Storage=@"_Html_position", Name=@"html_position", DbType=@"Int")]
		public int? Html_position
		{
			get { return _Html_position; }
			set {
				if (_Html_position != value) {
					OnHtml_positionChanging(value);
					SendPropertyChanging();
					_Html_position = value;
					SendPropertyChanged("Html_position");
					OnHtml_positionChanged();
				}
			}
		}
		
		partial void OnHome_team_bigChanging(int? value);
		partial void OnHome_team_bigChanged();
		private int? _Home_team_big;
		[Column(Storage=@"_Home_team_big", Name=@"home_team_big", DbType=@"Int")]
		public int? Home_team_big
		{
			get { return _Home_team_big; }
			set {
				if (_Home_team_big != value) {
					OnHome_team_bigChanging(value);
					SendPropertyChanging();
					_Home_team_big = value;
					SendPropertyChanged("Home_team_big");
					OnHome_team_bigChanged();
				}
			}
		}
		
		partial void OnAway_team_bigChanging(int? value);
		partial void OnAway_team_bigChanged();
		private int? _Away_team_big;
		[Column(Storage=@"_Away_team_big", Name=@"away_team_big", DbType=@"Int")]
		public int? Away_team_big
		{
			get { return _Away_team_big; }
			set {
				if (_Away_team_big != value) {
					OnAway_team_bigChanging(value);
					SendPropertyChanging();
					_Away_team_big = value;
					SendPropertyChanged("Away_team_big");
					OnAway_team_bigChanged();
				}
			}
		}
		
		partial void OnMatch_typeChanging(string value);
		partial void OnMatch_typeChanged();
		private string _Match_type;
		[Column(Storage=@"_Match_type", Name=@"match_type", DbType=@"NVarChar(50)")]
		public string Match_type
		{
			get { return _Match_type; }
			set {
				if (_Match_type != value) {
					OnMatch_typeChanging(value);
					SendPropertyChanging();
					_Match_type = value;
					SendPropertyChanged("Match_type");
					OnMatch_typeChanged();
				}
			}
		}
		
		partial void OnMatch_timeChanging(DateTime? value);
		partial void OnMatch_timeChanged();
		private DateTime? _Match_time;
		[Column(Storage=@"_Match_time", Name=@"match_time", DbType=@"DateTime")]
		public DateTime? Match_time
		{
			get { return _Match_time; }
			set {
				if (_Match_time != value) {
					OnMatch_timeChanging(value);
					SendPropertyChanging();
					_Match_time = value;
					SendPropertyChanged("Match_time");
					OnMatch_timeChanged();
				}
			}
		}
		
		partial void OnStatusChanging(string value);
		partial void OnStatusChanged();
		private string _Status;
		[Column(Storage=@"_Status", Name=@"status", DbType=@"NVarChar(50)")]
		public string Status
		{
			get { return _Status; }
			set {
				if (_Status != value) {
					OnStatusChanging(value);
					SendPropertyChanging();
					_Status = value;
					SendPropertyChanged("Status");
					OnStatusChanged();
				}
			}
		}
		
		partial void OnHome_teamChanging(string value);
		partial void OnHome_teamChanged();
		private string _Home_team;
		[Column(Storage=@"_Home_team", Name=@"home_team", DbType=@"NVarChar(50)")]
		public string Home_team
		{
			get { return _Home_team; }
			set {
				if (_Home_team != value) {
					OnHome_teamChanging(value);
					SendPropertyChanging();
					_Home_team = value;
					SendPropertyChanged("Home_team");
					OnHome_teamChanged();
				}
			}
		}
		
		partial void OnAway_teamChanging(string value);
		partial void OnAway_teamChanged();
		private string _Away_team;
		[Column(Storage=@"_Away_team", Name=@"away_team", DbType=@"NVarChar(50)")]
		public string Away_team
		{
			get { return _Away_team; }
			set {
				if (_Away_team != value) {
					OnAway_teamChanging(value);
					SendPropertyChanging();
					_Away_team = value;
					SendPropertyChanged("Away_team");
					OnAway_teamChanged();
				}
			}
		}
		
		partial void OnHome_red_cardChanging(int? value);
		partial void OnHome_red_cardChanged();
		private int? _Home_red_card;
		[Column(Storage=@"_Home_red_card", Name=@"home_red_card", DbType=@"Int")]
		public int? Home_red_card
		{
			get { return _Home_red_card; }
			set {
				if (_Home_red_card != value) {
					OnHome_red_cardChanging(value);
					SendPropertyChanging();
					_Home_red_card = value;
					SendPropertyChanged("Home_red_card");
					OnHome_red_cardChanged();
				}
			}
		}
		
		partial void OnAway_red_cardChanging(int? value);
		partial void OnAway_red_cardChanged();
		private int? _Away_red_card;
		[Column(Storage=@"_Away_red_card", Name=@"away_red_card", DbType=@"Int")]
		public int? Away_red_card
		{
			get { return _Away_red_card; }
			set {
				if (_Away_red_card != value) {
					OnAway_red_cardChanging(value);
					SendPropertyChanging();
					_Away_red_card = value;
					SendPropertyChanged("Away_red_card");
					OnAway_red_cardChanged();
				}
			}
		}
		
		partial void OnFull_home_goalsChanging(int? value);
		partial void OnFull_home_goalsChanged();
		private int? _Full_home_goals;
		[Column(Storage=@"_Full_home_goals", Name=@"full_home_goals", DbType=@"Int")]
		public int? Full_home_goals
		{
			get { return _Full_home_goals; }
			set {
				if (_Full_home_goals != value) {
					OnFull_home_goalsChanging(value);
					SendPropertyChanging();
					_Full_home_goals = value;
					SendPropertyChanged("Full_home_goals");
					OnFull_home_goalsChanged();
				}
			}
		}
		
		partial void OnFull_away_goalsChanging(int? value);
		partial void OnFull_away_goalsChanged();
		private int? _Full_away_goals;
		[Column(Storage=@"_Full_away_goals", Name=@"full_away_goals", DbType=@"Int")]
		public int? Full_away_goals
		{
			get { return _Full_away_goals; }
			set {
				if (_Full_away_goals != value) {
					OnFull_away_goalsChanging(value);
					SendPropertyChanging();
					_Full_away_goals = value;
					SendPropertyChanged("Full_away_goals");
					OnFull_away_goalsChanged();
				}
			}
		}
		
		partial void OnHalf_home_goalsChanging(int? value);
		partial void OnHalf_home_goalsChanged();
		private int? _Half_home_goals;
		[Column(Storage=@"_Half_home_goals", Name=@"half_home_goals", DbType=@"Int")]
		public int? Half_home_goals
		{
			get { return _Half_home_goals; }
			set {
				if (_Half_home_goals != value) {
					OnHalf_home_goalsChanging(value);
					SendPropertyChanging();
					_Half_home_goals = value;
					SendPropertyChanged("Half_home_goals");
					OnHalf_home_goalsChanged();
				}
			}
		}
		
		partial void OnHalf_away_goalsChanging(int? value);
		partial void OnHalf_away_goalsChanged();
		private int? _Half_away_goals;
		[Column(Storage=@"_Half_away_goals", Name=@"half_away_goals", DbType=@"Int")]
		public int? Half_away_goals
		{
			get { return _Half_away_goals; }
			set {
				if (_Half_away_goals != value) {
					OnHalf_away_goalsChanging(value);
					SendPropertyChanging();
					_Half_away_goals = value;
					SendPropertyChanged("Half_away_goals");
					OnHalf_away_goalsChanged();
				}
			}
		}
		
		#endregion
	}
}

namespace SoccerScore.Compact.Linq
{	
	[Table(Name=@"match_analysis_collection")]
	public partial class Match_analysis_collection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Match_analysis_collection()
		{
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnAnalysis_collection_idChanging(int value);
		partial void OnAnalysis_collection_idChanged();
		private int _Analysis_collection_id;
		[Column(Storage=@"_Analysis_collection_id", Name=@"analysis_collection_id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Analysis_collection_id
		{
			get { return _Analysis_collection_id; }
			set {
				if (_Analysis_collection_id != value) {
					OnAnalysis_collection_idChanging(value);
					SendPropertyChanging();
					_Analysis_collection_id = value;
					SendPropertyChanged("Analysis_collection_id");
					OnAnalysis_collection_idChanged();
				}
			}
		}
		
		partial void OnLive_table_lib_idChanging(int value);
		partial void OnLive_table_lib_idChanged();
		private int _Live_table_lib_id;
		[Column(Storage=@"_Live_table_lib_id", Name=@"live_table_lib_id", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int Live_table_lib_id
		{
			get { return _Live_table_lib_id; }
			set {
				if (_Live_table_lib_id != value) {
					OnLive_table_lib_idChanging(value);
					SendPropertyChanging();
					_Live_table_lib_id = value;
					SendPropertyChanged("Live_table_lib_id");
					OnLive_table_lib_idChanged();
				}
			}
		}
		
		partial void OnResult_tb_lib_idChanging(int? value);
		partial void OnResult_tb_lib_idChanged();
		private int? _Result_tb_lib_id;
		[Column(Storage=@"_Result_tb_lib_id", Name=@"result_tb_lib_id", DbType=@"Int")]
		public int? Result_tb_lib_id
		{
			get { return _Result_tb_lib_id; }
			set {
				if (_Result_tb_lib_id != value) {
					OnResult_tb_lib_idChanging(value);
					SendPropertyChanging();
					_Result_tb_lib_id = value;
					SendPropertyChanged("Result_tb_lib_id");
					OnResult_tb_lib_idChanged();
				}
			}
		}
		
		#endregion
	}
}

namespace SoccerScore.Compact.Linq
{	
	[Table(Name=@"match_analysis_result")]
	public partial class Match_analysis_result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Match_analysis_result()
		{
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnAnalysis_result_idChanging(int value);
		partial void OnAnalysis_result_idChanged();
		private int _Analysis_result_id;
		[Column(Storage=@"_Analysis_result_id", Name=@"analysis_result_id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Analysis_result_id
		{
			get { return _Analysis_result_id; }
			set {
				if (_Analysis_result_id != value) {
					OnAnalysis_result_idChanging(value);
					SendPropertyChanging();
					_Analysis_result_id = value;
					SendPropertyChanged("Analysis_result_id");
					OnAnalysis_result_idChanged();
				}
			}
		}
		
		partial void OnLive_table_lib_idChanging(int? value);
		partial void OnLive_table_lib_idChanged();
		private int? _Live_table_lib_id;
		[Column(Storage=@"_Live_table_lib_id", Name=@"live_table_lib_id", DbType=@"Int")]
		public int? Live_table_lib_id
		{
			get { return _Live_table_lib_id; }
			set {
				if (_Live_table_lib_id != value) {
					OnLive_table_lib_idChanging(value);
					SendPropertyChanging();
					_Live_table_lib_id = value;
					SendPropertyChanged("Live_table_lib_id");
					OnLive_table_lib_idChanged();
				}
			}
		}
		
		partial void OnResult_tb_lib_idChanging(int? value);
		partial void OnResult_tb_lib_idChanged();
		private int? _Result_tb_lib_id;
		[Column(Storage=@"_Result_tb_lib_id", Name=@"result_tb_lib_id", DbType=@"Int")]
		public int? Result_tb_lib_id
		{
			get { return _Result_tb_lib_id; }
			set {
				if (_Result_tb_lib_id != value) {
					OnResult_tb_lib_idChanging(value);
					SendPropertyChanging();
					_Result_tb_lib_id = value;
					SendPropertyChanged("Result_tb_lib_id");
					OnResult_tb_lib_idChanged();
				}
			}
		}
		
		partial void OnPre_algorithmChanging(string value);
		partial void OnPre_algorithmChanged();
		private string _Pre_algorithm;
		[Column(Storage=@"_Pre_algorithm", Name=@"pre_algorithm", DbType=@"NVarChar(20)")]
		public string Pre_algorithm
		{
			get { return _Pre_algorithm; }
			set {
				if (_Pre_algorithm != value) {
					OnPre_algorithmChanging(value);
					SendPropertyChanging();
					_Pre_algorithm = value;
					SendPropertyChanged("Pre_algorithm");
					OnPre_algorithmChanged();
				}
			}
		}
		
		partial void OnPre_match_countChanging(int? value);
		partial void OnPre_match_countChanged();
		private int? _Pre_match_count;
		[Column(Storage=@"_Pre_match_count", Name=@"pre_match_count", DbType=@"Int")]
		public int? Pre_match_count
		{
			get { return _Pre_match_count; }
			set {
				if (_Pre_match_count != value) {
					OnPre_match_countChanging(value);
					SendPropertyChanging();
					_Pre_match_count = value;
					SendPropertyChanged("Pre_match_count");
					OnPre_match_countChanged();
				}
			}
		}
		
		partial void OnHome_wChanging(int? value);
		partial void OnHome_wChanged();
		private int? _Home_w;
		[Column(Storage=@"_Home_w", Name=@"home_w", DbType=@"Int")]
		public int? Home_w
		{
			get { return _Home_w; }
			set {
				if (_Home_w != value) {
					OnHome_wChanging(value);
					SendPropertyChanging();
					_Home_w = value;
					SendPropertyChanged("Home_w");
					OnHome_wChanged();
				}
			}
		}
		
		partial void OnHome_dChanging(int? value);
		partial void OnHome_dChanged();
		private int? _Home_d;
		[Column(Storage=@"_Home_d", Name=@"home_d", DbType=@"Int")]
		public int? Home_d
		{
			get { return _Home_d; }
			set {
				if (_Home_d != value) {
					OnHome_dChanging(value);
					SendPropertyChanging();
					_Home_d = value;
					SendPropertyChanged("Home_d");
					OnHome_dChanged();
				}
			}
		}
		
		partial void OnHome_lChanging(int? value);
		partial void OnHome_lChanged();
		private int? _Home_l;
		[Column(Storage=@"_Home_l", Name=@"home_l", DbType=@"Int")]
		public int? Home_l
		{
			get { return _Home_l; }
			set {
				if (_Home_l != value) {
					OnHome_lChanging(value);
					SendPropertyChanging();
					_Home_l = value;
					SendPropertyChanged("Home_l");
					OnHome_lChanged();
				}
			}
		}
		
		partial void OnHome_goalsChanging(double? value);
		partial void OnHome_goalsChanged();
		private double? _Home_goals;
		[Column(Storage=@"_Home_goals", Name=@"home_goals", DbType=@"Float")]
		public double? Home_goals
		{
			get { return _Home_goals; }
			set {
				if (_Home_goals != value) {
					OnHome_goalsChanging(value);
					SendPropertyChanging();
					_Home_goals = value;
					SendPropertyChanged("Home_goals");
					OnHome_goalsChanged();
				}
			}
		}
		
		partial void OnAway_goalsChanging(double? value);
		partial void OnAway_goalsChanged();
		private double? _Away_goals;
		[Column(Storage=@"_Away_goals", Name=@"away_goals", DbType=@"Float")]
		public double? Away_goals
		{
			get { return _Away_goals; }
			set {
				if (_Away_goals != value) {
					OnAway_goalsChanging(value);
					SendPropertyChanging();
					_Away_goals = value;
					SendPropertyChanged("Away_goals");
					OnAway_goalsChanged();
				}
			}
		}
		
		partial void OnFit_win_lossChanging(double? value);
		partial void OnFit_win_lossChanged();
		private double? _Fit_win_loss;
		[Column(Storage=@"_Fit_win_loss", Name=@"fit_win_loss", DbType=@"Float")]
		public double? Fit_win_loss
		{
			get { return _Fit_win_loss; }
			set {
				if (_Fit_win_loss != value) {
					OnFit_win_lossChanging(value);
					SendPropertyChanging();
					_Fit_win_loss = value;
					SendPropertyChanged("Fit_win_loss");
					OnFit_win_lossChanged();
				}
			}
		}
		
		partial void OnFit_goalsChanging(double? value);
		partial void OnFit_goalsChanged();
		private double? _Fit_goals;
		[Column(Storage=@"_Fit_goals", Name=@"fit_goals", DbType=@"Float")]
		public double? Fit_goals
		{
			get { return _Fit_goals; }
			set {
				if (_Fit_goals != value) {
					OnFit_goalsChanging(value);
					SendPropertyChanging();
					_Fit_goals = value;
					SendPropertyChanged("Fit_goals");
					OnFit_goalsChanged();
				}
			}
		}
		
		partial void OnFit_odd_evenChanging(double? value);
		partial void OnFit_odd_evenChanged();
		private double? _Fit_odd_even;
		[Column(Storage=@"_Fit_odd_even", Name=@"fit_odd_even", DbType=@"Float")]
		public double? Fit_odd_even
		{
			get { return _Fit_odd_even; }
			set {
				if (_Fit_odd_even != value) {
					OnFit_odd_evenChanging(value);
					SendPropertyChanging();
					_Fit_odd_even = value;
					SendPropertyChanged("Fit_odd_even");
					OnFit_odd_evenChanged();
				}
			}
		}
		
		partial void OnResult_fitChanging(string value);
		partial void OnResult_fitChanged();
		private string _Result_fit;
		[Column(Storage=@"_Result_fit", Name=@"result_fit", DbType=@"NVarChar(20)")]
		public string Result_fit
		{
			get { return _Result_fit; }
			set {
				if (_Result_fit != value) {
					OnResult_fitChanging(value);
					SendPropertyChanging();
					_Result_fit = value;
					SendPropertyChanged("Result_fit");
					OnResult_fitChanged();
				}
			}
		}
		
		partial void OnResult_goalsChanging(string value);
		partial void OnResult_goalsChanged();
		private string _Result_goals;
		[Column(Storage=@"_Result_goals", Name=@"result_goals", DbType=@"NVarChar(20)")]
		public string Result_goals
		{
			get { return _Result_goals; }
			set {
				if (_Result_goals != value) {
					OnResult_goalsChanging(value);
					SendPropertyChanging();
					_Result_goals = value;
					SendPropertyChanged("Result_goals");
					OnResult_goalsChanged();
				}
			}
		}
		
		partial void OnResult_wdlChanging(string value);
		partial void OnResult_wdlChanged();
		private string _Result_wdl;
		[Column(Storage=@"_Result_wdl", Name=@"result_wdl", DbType=@"NVarChar(20)")]
		public string Result_wdl
		{
			get { return _Result_wdl; }
			set {
				if (_Result_wdl != value) {
					OnResult_wdlChanging(value);
					SendPropertyChanging();
					_Result_wdl = value;
					SendPropertyChanged("Result_wdl");
					OnResult_wdlChanged();
				}
			}
		}
		
		partial void OnCross_goalsChanging(double? value);
		partial void OnCross_goalsChanged();
		private double? _Cross_goals;
		[Column(Storage=@"_Cross_goals", Name=@"cross_goals", DbType=@"Float")]
		public double? Cross_goals
		{
			get { return _Cross_goals; }
			set {
				if (_Cross_goals != value) {
					OnCross_goalsChanging(value);
					SendPropertyChanging();
					_Cross_goals = value;
					SendPropertyChanged("Cross_goals");
					OnCross_goalsChanged();
				}
			}
		}
		
		partial void OnMyfitChanging(string value);
		partial void OnMyfitChanged();
		private string _Myfit;
		[Column(Storage=@"_Myfit", Name=@"myfit", DbType=@"NVarChar(20)")]
		public string Myfit
		{
			get { return _Myfit; }
			set {
				if (_Myfit != value) {
					OnMyfitChanging(value);
					SendPropertyChanging();
					_Myfit = value;
					SendPropertyChanged("Myfit");
					OnMyfitChanged();
				}
			}
		}
		
		partial void OnRecent_scoresChanging(int? value);
		partial void OnRecent_scoresChanged();
		private int? _Recent_scores;
		[Column(Storage=@"_Recent_scores", Name=@"recent_scores", DbType=@"Int")]
		public int? Recent_scores
		{
			get { return _Recent_scores; }
			set {
				if (_Recent_scores != value) {
					OnRecent_scoresChanging(value);
					SendPropertyChanging();
					_Recent_scores = value;
					SendPropertyChanged("Recent_scores");
					OnRecent_scoresChanged();
				}
			}
		}
		
		partial void OnRecent_2scoresChanging(int? value);
		partial void OnRecent_2scoresChanged();
		private int? _Recent_2scores;
		[Column(Storage=@"_Recent_2scores", Name=@"recent_2scores", DbType=@"Int")]
		public int? Recent_2scores
		{
			get { return _Recent_2scores; }
			set {
				if (_Recent_2scores != value) {
					OnRecent_2scoresChanging(value);
					SendPropertyChanging();
					_Recent_2scores = value;
					SendPropertyChanged("Recent_2scores");
					OnRecent_2scoresChanged();
				}
			}
		}
		
		partial void OnRecent_3scoresChanging(int? value);
		partial void OnRecent_3scoresChanged();
		private int? _Recent_3scores;
		[Column(Storage=@"_Recent_3scores", Name=@"recent_3scores", DbType=@"Int")]
		public int? Recent_3scores
		{
			get { return _Recent_3scores; }
			set {
				if (_Recent_3scores != value) {
					OnRecent_3scoresChanging(value);
					SendPropertyChanging();
					_Recent_3scores = value;
					SendPropertyChanged("Recent_3scores");
					OnRecent_3scoresChanged();
				}
			}
		}
		
		partial void OnRecent_4scoresChanging(int? value);
		partial void OnRecent_4scoresChanged();
		private int? _Recent_4scores;
		[Column(Storage=@"_Recent_4scores", Name=@"recent_4scores", DbType=@"Int")]
		public int? Recent_4scores
		{
			get { return _Recent_4scores; }
			set {
				if (_Recent_4scores != value) {
					OnRecent_4scoresChanging(value);
					SendPropertyChanging();
					_Recent_4scores = value;
					SendPropertyChanged("Recent_4scores");
					OnRecent_4scoresChanged();
				}
			}
		}
		
		partial void OnRecent_5scoresChanging(int? value);
		partial void OnRecent_5scoresChanged();
		private int? _Recent_5scores;
		[Column(Storage=@"_Recent_5scores", Name=@"recent_5scores", DbType=@"Int")]
		public int? Recent_5scores
		{
			get { return _Recent_5scores; }
			set {
				if (_Recent_5scores != value) {
					OnRecent_5scoresChanging(value);
					SendPropertyChanging();
					_Recent_5scores = value;
					SendPropertyChanged("Recent_5scores");
					OnRecent_5scoresChanged();
				}
			}
		}
		
		partial void OnRecent_6scoresChanging(int? value);
		partial void OnRecent_6scoresChanged();
		private int? _Recent_6scores;
		[Column(Storage=@"_Recent_6scores", Name=@"recent_6scores", DbType=@"Int")]
		public int? Recent_6scores
		{
			get { return _Recent_6scores; }
			set {
				if (_Recent_6scores != value) {
					OnRecent_6scoresChanging(value);
					SendPropertyChanging();
					_Recent_6scores = value;
					SendPropertyChanged("Recent_6scores");
					OnRecent_6scoresChanged();
				}
			}
		}
		
		partial void OnGrnn_fitChanging(string value);
		partial void OnGrnn_fitChanged();
		private string _Grnn_fit;
		[Column(Storage=@"_Grnn_fit", Name=@"grnn_fit", DbType=@"NVarChar(100)")]
		public string Grnn_fit
		{
			get { return _Grnn_fit; }
			set {
				if (_Grnn_fit != value) {
					OnGrnn_fitChanging(value);
					SendPropertyChanging();
					_Grnn_fit = value;
					SendPropertyChanged("Grnn_fit");
					OnGrnn_fitChanged();
				}
			}
		}
		
		partial void OnPnn_fitChanging(string value);
		partial void OnPnn_fitChanged();
		private string _Pnn_fit;
		[Column(Storage=@"_Pnn_fit", Name=@"pnn_fit", DbType=@"NVarChar(20)")]
		public string Pnn_fit
		{
			get { return _Pnn_fit; }
			set {
				if (_Pnn_fit != value) {
					OnPnn_fitChanging(value);
					SendPropertyChanging();
					_Pnn_fit = value;
					SendPropertyChanged("Pnn_fit");
					OnPnn_fitChanged();
				}
			}
		}
		
		#endregion
	}
}

namespace SoccerScore.Compact.Linq
{	
	[Table(Name=@"match_table_xpath")]
	public partial class Match_table_xpath : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Match_table_xpath()
		{
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnUri_host_idChanging(int value);
		partial void OnUri_host_idChanged();
		private int _Uri_host_id;
		[Column(Storage=@"_Uri_host_id", Name=@"uri_host_id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Uri_host_id
		{
			get { return _Uri_host_id; }
			set {
				if (_Uri_host_id != value) {
					OnUri_host_idChanging(value);
					SendPropertyChanging();
					_Uri_host_id = value;
					SendPropertyChanged("Uri_host_id");
					OnUri_host_idChanged();
				}
			}
		}
		
		partial void OnUri_hostChanging(string value);
		partial void OnUri_hostChanged();
		private string _Uri_host;
		[Column(Storage=@"_Uri_host", Name=@"uri_host", DbType=@"NVarChar(500)")]
		public string Uri_host
		{
			get { return _Uri_host; }
			set {
				if (_Uri_host != value) {
					OnUri_hostChanging(value);
					SendPropertyChanging();
					_Uri_host = value;
					SendPropertyChanged("Uri_host");
					OnUri_hostChanged();
				}
			}
		}
		
		partial void OnMax_table_xpathChanging(string value);
		partial void OnMax_table_xpathChanged();
		private string _Max_table_xpath;
		[Column(Storage=@"_Max_table_xpath", Name=@"max_table_xpath", DbType=@"NVarChar(500)")]
		public string Max_table_xpath
		{
			get { return _Max_table_xpath; }
			set {
				if (_Max_table_xpath != value) {
					OnMax_table_xpathChanging(value);
					SendPropertyChanging();
					_Max_table_xpath = value;
					SendPropertyChanged("Max_table_xpath");
					OnMax_table_xpathChanged();
				}
			}
		}
		
		partial void OnMax_table_id_valueChanging(string value);
		partial void OnMax_table_id_valueChanged();
		private string _Max_table_id_value;
		[Column(Storage=@"_Max_table_id_value", Name=@"max_table_id_value", DbType=@"NVarChar(500)")]
		public string Max_table_id_value
		{
			get { return _Max_table_id_value; }
			set {
				if (_Max_table_id_value != value) {
					OnMax_table_id_valueChanging(value);
					SendPropertyChanging();
					_Max_table_id_value = value;
					SendPropertyChanged("Max_table_id_value");
					OnMax_table_id_valueChanged();
				}
			}
		}
		
		partial void OnSecond_table_xpathChanging(string value);
		partial void OnSecond_table_xpathChanged();
		private string _Second_table_xpath;
		[Column(Storage=@"_Second_table_xpath", Name=@"second_table_xpath", DbType=@"NVarChar(500)")]
		public string Second_table_xpath
		{
			get { return _Second_table_xpath; }
			set {
				if (_Second_table_xpath != value) {
					OnSecond_table_xpathChanging(value);
					SendPropertyChanging();
					_Second_table_xpath = value;
					SendPropertyChanged("Second_table_xpath");
					OnSecond_table_xpathChanged();
				}
			}
		}
		
		partial void OnSecond_table_id_valueChanging(string value);
		partial void OnSecond_table_id_valueChanged();
		private string _Second_table_id_value;
		[Column(Storage=@"_Second_table_id_value", Name=@"second_table_id_value", DbType=@"NVarChar(500)")]
		public string Second_table_id_value
		{
			get { return _Second_table_id_value; }
			set {
				if (_Second_table_id_value != value) {
					OnSecond_table_id_valueChanging(value);
					SendPropertyChanging();
					_Second_table_id_value = value;
					SendPropertyChanged("Second_table_id_value");
					OnSecond_table_id_valueChanged();
				}
			}
		}
		
		partial void OnOrder_table_idChanging(int? value);
		partial void OnOrder_table_idChanged();
		private int? _Order_table_id;
		[Column(Storage=@"_Order_table_id", Name=@"order_table_id", DbType=@"Int")]
		public int? Order_table_id
		{
			get { return _Order_table_id; }
			set {
				if (_Order_table_id != value) {
					OnOrder_table_idChanging(value);
					SendPropertyChanging();
					_Order_table_id = value;
					SendPropertyChanged("Order_table_id");
					OnOrder_table_idChanged();
				}
			}
		}
		
		#endregion
	}
}

namespace SoccerScore.Compact.Linq
{	
	[Table(Name=@"result_tb")]
	public partial class Result_tb : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Result_tb()
		{
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnResult_tb_idChanging(int value);
		partial void OnResult_tb_idChanged();
		private int _Result_tb_id;
		[Column(Storage=@"_Result_tb_id", Name=@"result_tb_id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Result_tb_id
		{
			get { return _Result_tb_id; }
			set {
				if (_Result_tb_id != value) {
					OnResult_tb_idChanging(value);
					SendPropertyChanging();
					_Result_tb_id = value;
					SendPropertyChanged("Result_tb_id");
					OnResult_tb_idChanged();
				}
			}
		}
		
		partial void OnHtml_positionChanging(string value);
		partial void OnHtml_positionChanged();
		private string _Html_position;
		[Column(Storage=@"_Html_position", Name=@"html_position", DbType=@"NVarChar(50)")]
		public string Html_position
		{
			get { return _Html_position; }
			set {
				if (_Html_position != value) {
					OnHtml_positionChanging(value);
					SendPropertyChanging();
					_Html_position = value;
					SendPropertyChanged("Html_position");
					OnHtml_positionChanged();
				}
			}
		}
		
		partial void OnHome_team_bigChanging(string value);
		partial void OnHome_team_bigChanged();
		private string _Home_team_big;
		[Column(Storage=@"_Home_team_big", Name=@"home_team_big", DbType=@"NVarChar(50)")]
		public string Home_team_big
		{
			get { return _Home_team_big; }
			set {
				if (_Home_team_big != value) {
					OnHome_team_bigChanging(value);
					SendPropertyChanging();
					_Home_team_big = value;
					SendPropertyChanged("Home_team_big");
					OnHome_team_bigChanged();
				}
			}
		}
		
		partial void OnAway_team_bigChanging(string value);
		partial void OnAway_team_bigChanged();
		private string _Away_team_big;
		[Column(Storage=@"_Away_team_big", Name=@"away_team_big", DbType=@"NVarChar(50)")]
		public string Away_team_big
		{
			get { return _Away_team_big; }
			set {
				if (_Away_team_big != value) {
					OnAway_team_bigChanging(value);
					SendPropertyChanging();
					_Away_team_big = value;
					SendPropertyChanged("Away_team_big");
					OnAway_team_bigChanged();
				}
			}
		}
		
		partial void OnMatch_typeChanging(string value);
		partial void OnMatch_typeChanged();
		private string _Match_type;
		[Column(Storage=@"_Match_type", Name=@"match_type", DbType=@"NVarChar(50)")]
		public string Match_type
		{
			get { return _Match_type; }
			set {
				if (_Match_type != value) {
					OnMatch_typeChanging(value);
					SendPropertyChanging();
					_Match_type = value;
					SendPropertyChanged("Match_type");
					OnMatch_typeChanged();
				}
			}
		}
		
		partial void OnS_dateChanging(string value);
		partial void OnS_dateChanged();
		private string _S_date;
		[Column(Storage=@"_S_date", Name=@"s_date", DbType=@"NVarChar(50)")]
		public string S_date
		{
			get { return _S_date; }
			set {
				if (_S_date != value) {
					OnS_dateChanging(value);
					SendPropertyChanging();
					_S_date = value;
					SendPropertyChanged("S_date");
					OnS_dateChanged();
				}
			}
		}
		
		partial void OnS_timeChanging(string value);
		partial void OnS_timeChanged();
		private string _S_time;
		[Column(Storage=@"_S_time", Name=@"s_time", DbType=@"NVarChar(50)")]
		public string S_time
		{
			get { return _S_time; }
			set {
				if (_S_time != value) {
					OnS_timeChanging(value);
					SendPropertyChanging();
					_S_time = value;
					SendPropertyChanged("S_time");
					OnS_timeChanged();
				}
			}
		}
		
		partial void OnHome_teamChanging(string value);
		partial void OnHome_teamChanged();
		private string _Home_team;
		[Column(Storage=@"_Home_team", Name=@"home_team", DbType=@"NVarChar(50)")]
		public string Home_team
		{
			get { return _Home_team; }
			set {
				if (_Home_team != value) {
					OnHome_teamChanging(value);
					SendPropertyChanging();
					_Home_team = value;
					SendPropertyChanged("Home_team");
					OnHome_teamChanged();
				}
			}
		}
		
		partial void OnAway_teamChanging(string value);
		partial void OnAway_teamChanged();
		private string _Away_team;
		[Column(Storage=@"_Away_team", Name=@"away_team", DbType=@"NVarChar(50)")]
		public string Away_team
		{
			get { return _Away_team; }
			set {
				if (_Away_team != value) {
					OnAway_teamChanging(value);
					SendPropertyChanging();
					_Away_team = value;
					SendPropertyChanged("Away_team");
					OnAway_teamChanged();
				}
			}
		}
		
		partial void OnFull_time_scoreChanging(string value);
		partial void OnFull_time_scoreChanged();
		private string _Full_time_score;
		[Column(Storage=@"_Full_time_score", Name=@"full_time_score", DbType=@"NVarChar(50)")]
		public string Full_time_score
		{
			get { return _Full_time_score; }
			set {
				if (_Full_time_score != value) {
					OnFull_time_scoreChanging(value);
					SendPropertyChanging();
					_Full_time_score = value;
					SendPropertyChanged("Full_time_score");
					OnFull_time_scoreChanged();
				}
			}
		}
		
		partial void OnHalf_time_scoreChanging(string value);
		partial void OnHalf_time_scoreChanged();
		private string _Half_time_score;
		[Column(Storage=@"_Half_time_score", Name=@"half_time_score", DbType=@"NVarChar(50)")]
		public string Half_time_score
		{
			get { return _Half_time_score; }
			set {
				if (_Half_time_score != value) {
					OnHalf_time_scoreChanging(value);
					SendPropertyChanging();
					_Half_time_score = value;
					SendPropertyChanged("Half_time_score");
					OnHalf_time_scoreChanged();
				}
			}
		}
		
		partial void OnOddsChanging(string value);
		partial void OnOddsChanged();
		private string _Odds;
		[Column(Storage=@"_Odds", Name=@"odds", DbType=@"NVarChar(50)")]
		public string Odds
		{
			get { return _Odds; }
			set {
				if (_Odds != value) {
					OnOddsChanging(value);
					SendPropertyChanging();
					_Odds = value;
					SendPropertyChanged("Odds");
					OnOddsChanged();
				}
			}
		}
		
		partial void OnWin_loss_bigChanging(string value);
		partial void OnWin_loss_bigChanged();
		private string _Win_loss_big;
		[Column(Storage=@"_Win_loss_big", Name=@"win_loss_big", DbType=@"NVarChar(50)")]
		public string Win_loss_big
		{
			get { return _Win_loss_big; }
			set {
				if (_Win_loss_big != value) {
					OnWin_loss_bigChanging(value);
					SendPropertyChanging();
					_Win_loss_big = value;
					SendPropertyChanged("Win_loss_big");
					OnWin_loss_bigChanged();
				}
			}
		}
		
		#endregion
	}
}

namespace SoccerScore.Compact.Linq
{	
	[Table(Name=@"result_tb_lib")]
	public partial class Result_tb_lib : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Result_tb_lib()
		{
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnResult_tb_lib_idChanging(int value);
		partial void OnResult_tb_lib_idChanged();
		private int _Result_tb_lib_id;
		[Column(Storage=@"_Result_tb_lib_id", Name=@"result_tb_lib_id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Result_tb_lib_id
		{
			get { return _Result_tb_lib_id; }
			set {
				if (_Result_tb_lib_id != value) {
					OnResult_tb_lib_idChanging(value);
					SendPropertyChanging();
					_Result_tb_lib_id = value;
					SendPropertyChanged("Result_tb_lib_id");
					OnResult_tb_lib_idChanged();
				}
			}
		}
		
		partial void OnHtml_positionChanging(int? value);
		partial void OnHtml_positionChanged();
		private int? _Html_position;
		[Column(Storage=@"_Html_position", Name=@"html_position", DbType=@"Int")]
		public int? Html_position
		{
			get { return _Html_position; }
			set {
				if (_Html_position != value) {
					OnHtml_positionChanging(value);
					SendPropertyChanging();
					_Html_position = value;
					SendPropertyChanged("Html_position");
					OnHtml_positionChanged();
				}
			}
		}
		
		partial void OnHome_team_bigChanging(int? value);
		partial void OnHome_team_bigChanged();
		private int? _Home_team_big;
		[Column(Storage=@"_Home_team_big", Name=@"home_team_big", DbType=@"Int")]
		public int? Home_team_big
		{
			get { return _Home_team_big; }
			set {
				if (_Home_team_big != value) {
					OnHome_team_bigChanging(value);
					SendPropertyChanging();
					_Home_team_big = value;
					SendPropertyChanged("Home_team_big");
					OnHome_team_bigChanged();
				}
			}
		}
		
		partial void OnAway_team_bigChanging(int? value);
		partial void OnAway_team_bigChanged();
		private int? _Away_team_big;
		[Column(Storage=@"_Away_team_big", Name=@"away_team_big", DbType=@"Int")]
		public int? Away_team_big
		{
			get { return _Away_team_big; }
			set {
				if (_Away_team_big != value) {
					OnAway_team_bigChanging(value);
					SendPropertyChanging();
					_Away_team_big = value;
					SendPropertyChanged("Away_team_big");
					OnAway_team_bigChanged();
				}
			}
		}
		
		partial void OnMatch_typeChanging(string value);
		partial void OnMatch_typeChanged();
		private string _Match_type;
		[Column(Storage=@"_Match_type", Name=@"match_type", DbType=@"NVarChar(50)")]
		public string Match_type
		{
			get { return _Match_type; }
			set {
				if (_Match_type != value) {
					OnMatch_typeChanging(value);
					SendPropertyChanging();
					_Match_type = value;
					SendPropertyChanged("Match_type");
					OnMatch_typeChanged();
				}
			}
		}
		
		partial void OnMatch_timeChanging(DateTime? value);
		partial void OnMatch_timeChanged();
		private DateTime? _Match_time;
		[Column(Storage=@"_Match_time", Name=@"match_time", DbType=@"DateTime")]
		public DateTime? Match_time
		{
			get { return _Match_time; }
			set {
				if (_Match_time != value) {
					OnMatch_timeChanging(value);
					SendPropertyChanging();
					_Match_time = value;
					SendPropertyChanged("Match_time");
					OnMatch_timeChanged();
				}
			}
		}
		
		partial void OnHome_teamChanging(string value);
		partial void OnHome_teamChanged();
		private string _Home_team;
		[Column(Storage=@"_Home_team", Name=@"home_team", DbType=@"NVarChar(50)")]
		public string Home_team
		{
			get { return _Home_team; }
			set {
				if (_Home_team != value) {
					OnHome_teamChanging(value);
					SendPropertyChanging();
					_Home_team = value;
					SendPropertyChanged("Home_team");
					OnHome_teamChanged();
				}
			}
		}
		
		partial void OnAway_teamChanging(string value);
		partial void OnAway_teamChanged();
		private string _Away_team;
		[Column(Storage=@"_Away_team", Name=@"away_team", DbType=@"NVarChar(50)")]
		public string Away_team
		{
			get { return _Away_team; }
			set {
				if (_Away_team != value) {
					OnAway_teamChanging(value);
					SendPropertyChanging();
					_Away_team = value;
					SendPropertyChanged("Away_team");
					OnAway_teamChanged();
				}
			}
		}
		
		partial void OnOddsChanging(string value);
		partial void OnOddsChanged();
		private string _Odds;
		[Column(Storage=@"_Odds", Name=@"odds", DbType=@"NVarChar(50)")]
		public string Odds
		{
			get { return _Odds; }
			set {
				if (_Odds != value) {
					OnOddsChanging(value);
					SendPropertyChanging();
					_Odds = value;
					SendPropertyChanged("Odds");
					OnOddsChanged();
				}
			}
		}
		
		partial void OnWin_loss_bigChanging(string value);
		partial void OnWin_loss_bigChanged();
		private string _Win_loss_big;
		[Column(Storage=@"_Win_loss_big", Name=@"win_loss_big", DbType=@"NVarChar(50)")]
		public string Win_loss_big
		{
			get { return _Win_loss_big; }
			set {
				if (_Win_loss_big != value) {
					OnWin_loss_bigChanging(value);
					SendPropertyChanging();
					_Win_loss_big = value;
					SendPropertyChanged("Win_loss_big");
					OnWin_loss_bigChanged();
				}
			}
		}
		
		partial void OnHome_red_cardChanging(int? value);
		partial void OnHome_red_cardChanged();
		private int? _Home_red_card;
		[Column(Storage=@"_Home_red_card", Name=@"home_red_card", DbType=@"Int")]
		public int? Home_red_card
		{
			get { return _Home_red_card; }
			set {
				if (_Home_red_card != value) {
					OnHome_red_cardChanging(value);
					SendPropertyChanging();
					_Home_red_card = value;
					SendPropertyChanged("Home_red_card");
					OnHome_red_cardChanged();
				}
			}
		}
		
		partial void OnAway_red_cardChanging(int? value);
		partial void OnAway_red_cardChanged();
		private int? _Away_red_card;
		[Column(Storage=@"_Away_red_card", Name=@"away_red_card", DbType=@"Int")]
		public int? Away_red_card
		{
			get { return _Away_red_card; }
			set {
				if (_Away_red_card != value) {
					OnAway_red_cardChanging(value);
					SendPropertyChanging();
					_Away_red_card = value;
					SendPropertyChanged("Away_red_card");
					OnAway_red_cardChanged();
				}
			}
		}
		
		partial void OnFull_home_goalsChanging(int? value);
		partial void OnFull_home_goalsChanged();
		private int? _Full_home_goals;
		[Column(Storage=@"_Full_home_goals", Name=@"full_home_goals", DbType=@"Int")]
		public int? Full_home_goals
		{
			get { return _Full_home_goals; }
			set {
				if (_Full_home_goals != value) {
					OnFull_home_goalsChanging(value);
					SendPropertyChanging();
					_Full_home_goals = value;
					SendPropertyChanged("Full_home_goals");
					OnFull_home_goalsChanged();
				}
			}
		}
		
		partial void OnFull_away_goalsChanging(int? value);
		partial void OnFull_away_goalsChanged();
		private int? _Full_away_goals;
		[Column(Storage=@"_Full_away_goals", Name=@"full_away_goals", DbType=@"Int")]
		public int? Full_away_goals
		{
			get { return _Full_away_goals; }
			set {
				if (_Full_away_goals != value) {
					OnFull_away_goalsChanging(value);
					SendPropertyChanging();
					_Full_away_goals = value;
					SendPropertyChanged("Full_away_goals");
					OnFull_away_goalsChanged();
				}
			}
		}
		
		partial void OnHalf_home_goalsChanging(int? value);
		partial void OnHalf_home_goalsChanged();
		private int? _Half_home_goals;
		[Column(Storage=@"_Half_home_goals", Name=@"half_home_goals", DbType=@"Int")]
		public int? Half_home_goals
		{
			get { return _Half_home_goals; }
			set {
				if (_Half_home_goals != value) {
					OnHalf_home_goalsChanging(value);
					SendPropertyChanging();
					_Half_home_goals = value;
					SendPropertyChanged("Half_home_goals");
					OnHalf_home_goalsChanged();
				}
			}
		}
		
		partial void OnHalf_away_goalsChanging(int? value);
		partial void OnHalf_away_goalsChanged();
		private int? _Half_away_goals;
		[Column(Storage=@"_Half_away_goals", Name=@"half_away_goals", DbType=@"Int")]
		public int? Half_away_goals
		{
			get { return _Half_away_goals; }
			set {
				if (_Half_away_goals != value) {
					OnHalf_away_goalsChanging(value);
					SendPropertyChanging();
					_Half_away_goals = value;
					SendPropertyChanged("Half_away_goals");
					OnHalf_away_goalsChanged();
				}
			}
		}
		
		#endregion
	}
}

namespace SoccerScore.Compact.Linq
{	
	[Table(Name=@"Live_Single")]
	public partial class Live_Single : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		public virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		public virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public Live_Single()
		{
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnLive_Single_idChanging(int value);
		partial void OnLive_Single_idChanged();
		private int _Live_Single_id;
		[Column(Storage=@"_Live_Single_id", AutoSync=AutoSync.OnInsert, DbType=@"Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Live_Single_id
		{
			get { return _Live_Single_id; }
			set {
				if (_Live_Single_id != value) {
					OnLive_Single_idChanging(value);
					SendPropertyChanging();
					_Live_Single_id = value;
					SendPropertyChanged("Live_Single_id");
					OnLive_Single_idChanged();
				}
			}
		}
		
		partial void OnHtml_positionChanging(string value);
		partial void OnHtml_positionChanged();
		private string _Html_position;
		[Column(Storage=@"_Html_position", DbType=@"NVarChar(50)")]
		public string Html_position
		{
			get { return _Html_position; }
			set {
				if (_Html_position != value) {
					OnHtml_positionChanging(value);
					SendPropertyChanging();
					_Html_position = value;
					SendPropertyChanged("Html_position");
					OnHtml_positionChanged();
				}
			}
		}
		
		partial void OnHome_team_bigChanging(string value);
		partial void OnHome_team_bigChanged();
		private string _Home_team_big;
		[Column(Storage=@"_Home_team_big", DbType=@"NVarChar(50)")]
		public string Home_team_big
		{
			get { return _Home_team_big; }
			set {
				if (_Home_team_big != value) {
					OnHome_team_bigChanging(value);
					SendPropertyChanging();
					_Home_team_big = value;
					SendPropertyChanged("Home_team_big");
					OnHome_team_bigChanged();
				}
			}
		}
		
		partial void OnAway_team_bigChanging(string value);
		partial void OnAway_team_bigChanged();
		private string _Away_team_big;
		[Column(Storage=@"_Away_team_big", DbType=@"NVarChar(50)")]
		public string Away_team_big
		{
			get { return _Away_team_big; }
			set {
				if (_Away_team_big != value) {
					OnAway_team_bigChanging(value);
					SendPropertyChanging();
					_Away_team_big = value;
					SendPropertyChanged("Away_team_big");
					OnAway_team_bigChanged();
				}
			}
		}
		
		partial void OnStatusChanging(string value);
		partial void OnStatusChanged();
		private string _Status;
		[Column(Storage=@"_Status", DbType=@"NVarChar(50)")]
		public string Status
		{
			get { return _Status; }
			set {
				if (_Status != value) {
					OnStatusChanging(value);
					SendPropertyChanging();
					_Status = value;
					SendPropertyChanged("Status");
					OnStatusChanged();
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 1591